
==================== Tidy Core ====================
2016-07-13 02:20:57.281410206 UTC

Result size of Tidy Core = {terms: 119, types: 727, coercions: 529}

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
$trModule2 = TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
$trModule1 = TrNameS "BarBench"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
$trModule = Module $trModule2 $trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0}
benches15 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
benches15 = unpackCString# "Bar"#

-- RHS size: {terms: 3, types: 4, coercions: 7}
benches14 :: R:SingBinz ('D0 'B1)
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches14 = SD0 ($fSingIBinD0_$d~~ `cast` ...) $fSingIBinB1_$s$WSB1

-- RHS size: {terms: 3, types: 7, coercions: 13}
benches13 :: R:SingPrimeBinz ('P ('D0 'B1))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches13 =
  SP ($fSingIPrimeBinP_$d~~ `cast` ...) (benches14 `cast` ...)

-- RHS size: {terms: 3, types: 4, coercions: 7}
benches12 :: R:SingPosz ('S 'O)
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches12 = SS ($fSingIPosS_$d~~ `cast` ...) $fSingIPosO_$s$WSO

-- RHS size: {terms: 3, types: 7, coercions: 13}
benches11 :: R:SingPosz ('S ('S 'O))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches11 = SS ($fSingIPosS_$d~~ `cast` ...) (benches12 `cast` ...)

-- RHS size: {terms: 3, types: 10, coercions: 16}
benches10 :: R:SingPosz ('S ('S ('S 'O)))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches10 = SS ($fSingIPosS_$d~~ `cast` ...) (benches11 `cast` ...)

-- RHS size: {terms: 3, types: 13, coercions: 19}
benches9 :: R:SingPosz ('S ('S ('S ('S 'O))))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches9 = SS ($fSingIPosS_$d~~ `cast` ...) (benches10 `cast` ...)

-- RHS size: {terms: 3, types: 16, coercions: 22}
benches8 :: R:SingPosz ('S ('S ('S ('S ('S 'O)))))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches8 = SS ($fSingIPosS_$d~~ `cast` ...) (benches9 `cast` ...)

-- RHS size: {terms: 3, types: 19, coercions: 25}
benches7 :: R:SingPosz ('S ('S ('S ('S ('S ('S 'O))))))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches7 = SS ($fSingIPosS_$d~~ `cast` ...) (benches8 `cast` ...)

-- RHS size: {terms: 4, types: 37, coercions: 45}
benches6
  :: R:Sing(,)z
       PrimeBin Pos '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
benches6 =
  STuple2
    ($fSingI(,)(,)_$d~~ `cast` ...)
    (benches13 `cast` ...)
    (benches7 `cast` ...)

-- RHS size: {terms: 3, types: 40, coercions: 48}
benches5
  :: R:SingPrimePowerz
       ('PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O)))))))
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches5 =
  SPP ($fSingIPrimePowerPP_$d~~ `cast` ...) (benches6 `cast` ...)

-- RHS size: {terms: 4, types: 53, coercions: 61}
benches4
  :: R:Sing[]z
       PrimePower '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
benches4 =
  SCons
    ($fSingI[]:_$d~~ `cast` ...)
    (benches5 `cast` ...)
    ($fSingI[][]1 `cast` ...)

-- RHS size: {terms: 3, types: 55, coercions: 62}
benches3
  :: R:SingFactoredz
       ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches3 = SF ($fSingIFactoredF_$d~~ `cast` ...) (benches4 `cast` ...)

-- RHS size: {terms: 2, types: 19, coercions: 25}
benches2
  :: Tagged
       (FSym1 ('PP (Tuple2Sym2 ('P ('D0 'B1)) ('S ('S ('S ('S ('S ('S 'O))))))) :$$$ '[])) [PP]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
benches2 = ppsFact (benches3 `cast` ...)

-- RHS size: {terms: 7, types: 1, coercions: 23}
benches_n :: Int64
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 20}]
benches_n =
  case $wgo (benches2 `cast` ...) 1# of ww { __DEFAULT -> I64# ww }

-- RHS size: {terms: 9, types: 5, coercions: 88}
benches1 [InlPrag=INLINE[0]]
  :: Int64 -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=DmdType <S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once!] :: Int64)
                 (w1 [Occ=Once, OS=OneShot] :: State# RealWorld) ->
                 case w of _ [Occ=Dead] { I64# ww1 [Occ=Once] ->
                 benches_$s$wgo12 w1 ww1 (benches_n `cast` ...) @~ ...
                 }}]
benches1 =
  \ (w :: Int64) (w1 [OS=OneShot] :: State# RealWorld) ->
    case w of _ [Occ=Dead] { I64# ww1 ->
    benches_$s$wgo12 w1 ww1 (benches_n `cast` ...) @~ ...
    }

-- RHS size: {terms: 3, types: 0, coercions: 8}
benches :: Benchmark
[GblId,
 Str=DmdType m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
benches = Benchmark benches15 (benches1 `cast` ...)

Rec {
-- RHS size: {terms: 30, types: 169, coercions: 47}
benches_$s$wgo12 [Occ=LoopBreaker]
  :: State# RealWorld
     -> Int#
     -> Bar
          Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
     -> ((Bar
            Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
          -> Foo
               ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])) :: *)
        ~R#
        ((Bar
            Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
          -> Bar
               Foo
               ('F
                  '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])) :: *) =>
        (# State# RealWorld, () #)
[GblId, Arity=4, Str=DmdType <S,U><S,U><L,U><L,U>]
benches_$s$wgo12 =
  \ (sc [OS=OneShot] :: State# RealWorld)
    (sc1 :: Int#)
    (sc2
       :: Bar
            Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))]))
    (sg0
       :: ((Bar
              Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
            -> Foo
                 ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])) :: *)
          ~R#
          ((Bar
              Foo ('F '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])
            -> Bar
                 Foo
                 ('F
                    '['PP '('P ('D0 'B1), 'S ('S ('S ('S ('S ('S 'O))))))])) :: *)) ->
    case tagToEnum# (<=# sc1 0#) of _ [Occ=Dead] {
      False ->
        case seq#
               (case foo (benches3 `cast` ...) (sc2 `cast` ...)
                of _ [Occ=Dead] { __DEFAULT ->
                ()
                })
               sc
        of _ [Occ=Dead] { (# ipv, ipv1 #) ->
        benches_$s$wgo12 ipv (-# sc1 1#) sc2 @~ ...
        };
      True -> (# sc, () #)
    }
end Rec }



